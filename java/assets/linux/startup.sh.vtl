#set ($vmArgs = $StringUtils.join($info.vmArgs, " "))
#!/usr/bin/env bash
# GNU/Linux startup script generated by JavaPackager for atlas

SCRIPTPATH=$(dirname "$(readlink -e "$0")")

#if ($info.bundleJre)
JAVA="$SCRIPTPATH/${info.jreDirectoryName}/bin/java"
#else
function showMessage() {
	if type -p notify-send; then
		notify-send -u critical "${info.name}" "$1"
	else
		echo $1
	fi
}
if type -p java > /dev/null; then
    JAVA=java
elif [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/java" ]];  then
    JAVA="$JAVA_HOME/bin/java"
else
    showMessage "Java not installed"
    exit 1
fi
#if ($info.jreMinVersion)
function compareVersions() {
        [[ "$1" == "$2" ]] && return 0
        local IFS=.
        local i v1 v2
        read -r -a v1 <<< "$1"
        read -r -a v2 <<< "$2"
        for ((i=${#v1[@]}; i<${#v2[@]}; i++))
        do
                v1[i]=0
        done
        for ((i=${#v2[@]}; i<${#v1[@]}; i++))
        do
                v2[i]=0
        done
        for ((i=0; i<${#v1[@]}; i++))
        do
                [[ "${v1[$i]}" > "${v2[$i]}" ]] && return 0
                [[ "${v1[$i]}" < "${v2[$i]}" ]] && return 1
        done
        return 0
}
JAVA_VERSION=$("$JAVA" -version 2>&1 | awk -F '"' '/version/ {print $2}')
compareVersions "$JAVA_VERSION" "${info.jreMinVersion}"
if [[ $? != 0 ]]; then
    showMessage "The application requires a Java Runtime Environment ${info.jreMinVersion} or higher."
    exit 1
fi
#end
#end

#if ($info.linuxConfig.wrapJar)
BINARY="$SCRIPTPATH/${info.executable.name}"
#else
BINARY="$SCRIPTPATH/${info.jarFile.name}"
#end

#if ($info.envPath)
export PATH=${info.envPath}
#end

JVMDefaultOptions="${vmArgs}"
JVMOptionsFile="$SCRIPTPATH/${info.name}.l4j.ini"
[ -f "${JVMOptionsFile}" ] && while read -r option; do JVMDefaultOptions+=" $option"; done <<< $(sed "/^#.*$/d" "${JVMOptionsFile}")

JVMClassPath="$BINARY"
#foreach ($classpath in $info.classpaths)
JVMClassPath+=":${classpath}"
#end

#if ($info.useResourcesAsWorkingDir)
cd "$SCRIPTPATH"
#end

#if ($info.scripts.bootstrap)
# invoke bootstrap script
Bootstrap="$SCRIPTPATH/scripts/${info.bootstrapFile.name}" && [ -x "$Bootstrap" ] && "$Bootstrap"
#end

#if ($info.administratorRequired)
pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY GDKBACKEND=x11 "${JAVA}" ${JVMDefaultOptions} -jar "${JVMClassPath}" $@
#else
# execute atlas
atlas() {
"${JAVA}" ${JVMDefaultOptions} -jar "${JVMClassPath}" $@
}
#end

# zenity dialog without gtk warnings
zen_nospam() {
  zenity 2> >(grep -v 'Gtk' >&2) --title="Atlas Serial Config" --width=300 --height=100 "$@"
}

# zenity dialogs for adding user to uucp group
change() {
  setup=$(zen_nospam --question --text="User: $USER does not have serial device permissions.\nUpdate permissions?")
  if [ $? -eq 0 ]; then
    # prompt user for sudo password
    PASS=$(zen_nospam --entry --hide-text --text="Enter your sudo/admin password:")
    if [ $? -eq 0 ]; then
      # add user to group
      echo "$PASS" | sudo -S usermod -a -G "$SERIAL_GROUP" "$USER"
      # create temp file indicating restart needed
      touch /tmp/restartrequired.status
      if groups "$USER" | grep -q "$SERIAL_GROUP"; then
          if [ $DISTRO == "steamos" ]; then
            # prompt for restart on SteamOS
            setup=$(zen_nospam --question --text="Permissions applied successfully.\nSteam Deck restart required.\nRestart now?")
            if [ $? -eq 0 ]; then
              # restart steam deck
              echo "$PASS" | sudo -S shutdown -r now
            else
              zen_nospam --warning --text="Restart aborted.\nRestart required to apply permissions."
            fi
          else
            # assume the user knows how to use a computer
            zen_nospam --info --text="Permissions set successfully.\nPlease log out and log back in to apply changes."
          fi
      else
        zen_nospam --warning --text="Failed to set user serial permissions.\nManual execution of \"sudo usermod -a -G $SERIAL_GROUP $USER\" may resolve this."
      fi
    else
      zen_nospam --warning --text="Canceled."
    fi
  else
    zen_nospam --warning --text="Canceled permissions change."
  fi
}

# detect linux distro
if [ -f /etc/os-release ]; then
    . /etc/os-release
    DISTRO="${ID}"
elif type lsb_release >/dev/null 2>&1; then
    DISTRO=$(lsb_release -i -s)
elif [ -f /etc/redhat-release ]; then
    DISTRO='centos'
else
    DISTRO=$(uname -s)
fi

# specify the appropriate user group
case "$DISTRO" in
    "ubuntu" | "debian")
        SERIAL_GROUP="dialout"
        ;;
    "fedora" | "centos" | "rhel")
        SERIAL_GROUP="dialout"
        ;;
    "arch")
        SERIAL_GROUP="uucp"
        ;;
    "steamos")
        SERIAL_GROUP="uucp"
        ;;
    "gentoo")
        SERIAL_GROUP="uucp"
        ;;
    "suse" | "opensuse")
        SERIAL_GROUP="uucp"
        ;;
    *)
        SERIAL_GROUP="dialout"
        ;;
esac

if groups "$USER" | grep -q "$SERIAL_GROUP"; then
  if [ -f "/tmp/restartrequired.status" ]; then
    if [ $DISTRO == "steamos" ]; then
      # prompt for restart on SteamOS
      zen_nospam --warning --text="A restart is required.\nRestart and try again."
    else
      # warn user that changes may not be applied but start atlas anyway
      zen_nospam --info --text="Serial permissions may not have been applied.\nAtlas will not be able detect Tactrix\nPlease log out and log back in to apply changes."
      atlas
    fi
  else
    # launch atlas
    atlas
  fi
else
  # start change permission function
  change
fi

exit 0
