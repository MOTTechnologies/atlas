package com.github.manevolent.atlas.connection;

import com.github.manevolent.atlas.ApplicationMetadata;

public class FlashResult {
    private final State state;
    private int bytesWritten;

    public FlashResult(State state, int bytesWritten) {
        this.state = state;
        this.bytesWritten = bytesWritten;
    }

    public State getState() {
        return state;
    }

    public int getBytesWritten() {
        return bytesWritten;
    }

    public enum State {
        /**
         * Flash operations are unsupported by this connection type.
         */
        UNSUPPORTED("Unsupported", "Recalibration of this vehicle or specific calibration data is unsupported by "
                + ApplicationMetadata.getName() + "."),

        /**
         * The flash operation was prevented in software on the local side due to an issue with the Calibration object
         * presented to the Connection API. Little or no CAN BUS traffic was generated by the transaction with the ECU.
         */
        PREVENTED("Prevented", "The recalibration was prevented by checks in " + ApplicationMetadata.getName() + "."),

        /**
         * The flash operation was rejected by the ECU due to some issue with the initiation of the programming
         * transaction. For example, a memory clear operation could be rejected, validation of parameters related to the
         * flash operation may not be succeeding, or an authorization step has failed.
         */
        REJECTED("Rejected", "The recalibration was rejected by the vehicle."),

        /**
         * The flash operation fully succeeded, and all data is believed to be persisted to the ECU's memory by all
         * internal probes and data available to reasonably conclude that the ECU will operate normally with the full
         * calibration applied.
         */
        SUCCESS("Success", "The calibration was fully re-flashed to the vehicle."),

        /**
         * The flash succeeded, but some portions of the calibration ROM file were not be applied, possibly due to
         * limitations deemed acceptable by the authors of the connection type. However, notice is presented to the
         * caller in case this state might inform a user of a calibration warning. In this state, however, the ECU is
         * expected to operate normally and the vehicle will operate with some or all of the calibration's intended
         * changes to vehicle operation still effectively applied. Another possibility is data was intentionally missed,
         * such as delta-based flashes where only specific changed memory is fully persisted to the ECU.
         */
        SUCCESS_DATA_MISSED("Success", "Some calibration data was missed or skipped, but this may be by design or" +
                "was expected (i.e. delta/partial flash)."),

        /**
         * The flash failed, but recovery is not required. This could, for example, be due to an authorization step
         * failing before recalibration can commence and data could be damaged or lost. The ECU will not be in a
         * working state, but any standard recalibration operation will recover the ECU.
         */
        FAILED("Failed", "Re-flash failed, but the ECU may still be operable. Re-run the recalibration operation."),

        /**
         * The flash failed critically, and recovery is strongly be recommended. Receiving this state should be taken
         * with extreme caution. This state implies that the ECU has been erroneously left in a state that will require
         * an advanced automated recovery procedure, or has no capability of automated recovery.
         */
        CRITICAL_FAILURE("Critical failure", "Recalibration failed; the ECU may be left inoperable. " +
                "Please verify ECU operation and/or begin recovery.");

        private final String title, message;

        State(String title, String message) {
            this.title = title;
            this.message = message;
        }

        public String getTitle() {
            return title;
        }

        public String getMessage() {
            return message;
        }
    }
}
