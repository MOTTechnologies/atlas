# ABSF.D reg2, reg3
:absf.d R1115odd, R2731odd is R1115odd & op0510=0x3F & op0004=0b00000; R2731odd & op2126=0b100010 & op1620=0b11000 {
  R2731odd = abs(R1115odd);
}

# ABSF.S reg2, reg3
:absf.s R1115, R2731 is R1115 & op0510=0x3F & op0004=0b00000; R2731 & op2126=0b100010 & op1620=0b01000 {
  R2731 = abs(R1115);
}

# ADDF.D reg1, reg2, reg3
:addf.d R0004odd, R1115odd, R2731odd is R1115odd & op0510=0x3F & R0004odd ; R2731odd & op2126=0b100011 & op1620=0b10000 {
  R2731odd = R1115odd f+ R0004odd;
}

# ADDF.S reg1, reg2, reg3
:addf.s R0004, R1115, R2731 is R1115 & op0510=0x3F & R0004 ; R2731 & op2126=0b100011 & op1620=0b00000 {
  R2731 = R1115 f+ R0004;
}

# CEILF.DL reg2, reg3
:ceilf.dl R1115odd, R2731odd is R1115odd & op0510=0x3F & op0004=0b00010; R2731odd & op2126=0b100010 & op1620=0b10100 {
  local tmp:8 = ceil(float2float(R1115odd));
  R2731odd = trunc(tmp);
}

# CEILF.DUL reg2, reg3
:ceilf.dul R1115odd, R2731odd is R1115odd & op0510=0x3F & op0004=0b10010; R2731odd & op2126=0b100010 & op1620=0b10100 {
  local tmp:8 = ceil(float2float(R1115odd));
  R2731odd = trunc(tmp);
}

# CEILF.DUW reg2, reg3
:ceilf.duw R1115odd, R2731 is R1115odd & op0510=0x3F & op0004=0b10010; R2731 & op2126=0b100010 & op1620=0b10000 {
  R2731 = trunc(ceil(R1115odd));
}

# CEILF.DW reg2, reg3
:ceilf.dw R1115odd, R2731 is R1115odd & op0510=0x3F & op0004=0b00010; R2731 & op2126=0b100010 & op1620=0b10000 {
  R2731 = trunc(ceil(R1115odd));
}

# CEILF.SL reg2, reg3
:ceilf.sl R1115, R2731odd is R1115 & op0510=0x3F & op0004=0b00010; R2731odd & op2126=0b100010 & op1620=0b00100 {
  local tmp:8 = ceil(float2float(R1115));
  R2731odd = trunc(tmp);
}

# CEILF.SUL reg2, reg3
:ceilf.sul R1115, R2731odd is R1115 & op0510=0x3F & op0004=0b10010; R2731odd & op2126=0b100010 & op1620=0b00100 {
  local tmp:8 = ceil(float2float(R1115));
  R2731odd = trunc(tmp);
}

# CEILF.SUW reg2, reg3
:ceilf.sul R1115, R2731 is R1115 & op0510=0x3F & op0004=0b10010; R2731 & op2126=0b100010 & op1620=0b00000 {
  R2731 = trunc(ceil(R1115));
}

# CEILF.SW reg2, reg3
:ceilf.sw R1115, R2731 is R1115 & op0510=0x3F & op0004=0b00010; R2731 & op2126=0b100010 & op1620=0b00000 {
  R2731 = trunc(ceil(R1115));
}

# CMOVF.D fcbit, reg1, reg2, reg3
:cmovf.d fcbit1719, R1115odd, R0004odd, R2731odd is R1115odd & op0510=0x3F & R0004odd; R2731odd & op2126=0b100000 & op2020=1 & fcbit1719 & op1616=0 {
  local tmp:8 = zext(FPSR >> (fcbit1719:1 + 24:1)) & 0x1;
  R2731odd = (tmp * R1115odd) | ((1-tmp) * R0004odd);
}

# CMOVF.S fcbit, reg1, reg2, reg3
:cmovf.s fcbit1719, R1115, R0004, R2731 is R1115 & op0510=0x3F & R0004; R2731 & op2126=0b100000 & op2020=0 & fcbit1719 & op1616=0 {
  local tmp:4 = (FPSR >> (fcbit1719:1 + 24:1)) & 0x1;
  R2731 = (tmp * R1115) | ((1-tmp) * R0004);
}

macro compare_float(fcond, reg2, reg1, result) {
  local un = (fcond & 1)        && (nan(reg2) || nan(reg1));
  local eq = ((fcond & 6) == 2) && (reg2 f== reg1);
  local lt = ((fcond & 6) == 4) && (reg2 f<  reg1);
  local le = ((fcond & 6) == 6) && (reg2 f<= reg1);
  # TODO (fcond & 8) throws exception when unordered
  result = zext(un || eq || lt || le);
}

# CMPF.D reg2, reg3
:cmpf.d fcond2730, R1115odd, R0004odd, fcbit1719 is R1115odd & op0510=0x3F & R0004odd; op3131=0 & fcond2730 & op2126=0b100001 & op2020=1 & fcbit1719 & op1616=0 {
  local res:4 = 0;
  compare_float (fcond2730:1, R1115odd, R0004odd, res);

  local newbit:4 = res << (24 + fcbit1719);
  local ones:4 = 1 << (24 + fcbit1719);
  FPSR = (FPSR & ~ones) | newbit;
}

# CMPF.S reg2, reg3
:cmpf.s fcond2730, R1115, R0004, fcbit1719 is R1115 & op0510=0x3F & R0004; op3131=0 & fcond2730 & op2126=0b100001 & op2020=0 & fcbit1719 & op1616=0 {
  local res:4 = 0;
  compare_float (fcond2730:1, R1115, R0004, res);

  local newbit:4 = res << (24 + fcbit1719);
  local ones:4 = 1 << (24 + fcbit1719);
  FPSR = (FPSR & ~ones) | newbit;
}

# TODO: do something with the current rounding mode
# CVTF.DL reg2, reg3
:cvtf.dl R1115odd, R2731odd is R1115odd & op0510=0x3F & op0004=0b00100; R2731odd & op2126=0b100010 & op1620=0b10100 {
  R2731odd = int2float(R1115odd);
}

# CVTF.DS reg2, reg3
:cvtf.ds R1115odd, R2731 is R1115odd & op0510=0x3F & op0004=0b00011; R2731 & op2126=0b100010 & op1620=0b10010 {
  R2731 = float2float(R1115odd);
}

# CVTF.DUL reg2, reg3
:cvtf.dul R1115odd, R2731odd is R1115odd & op0510=0x3F & op0004=0b10100; R2731odd & op2126=0b100010 & op1620=0b10100 {
  R2731odd = trunc(R1115odd);
}

# CVTF.DUW reg2, reg3
:cvtf.duw R1115odd, R2731 is R1115odd & op0510=0x3F & op0004=0b10100; R2731 & op2126=0b100010 & op1620=0b10000 {
  R2731 = trunc(R1115odd);
}

# CVTF.DW reg2, reg3
:cvtf.sw R1115odd, R2731 is R1115odd & op0510=0x3F & op0004=0b00100; R2731 & op2126=0b100010 & op1620=0b10000 {
  R2731 = trunc(R1115odd);
}

# CVTF.LD reg2, reg3
:cvtf.ls R1115odd, R2731odd is R1115odd & op0510=0x3F & op0004=0b00001; R2731odd & op2126=0b100010 & op1620=0b10010 {
  R2731odd = int2float(R1115odd);
}

# CVTF.LS reg2, reg3
:cvtf.ls R1115odd, R2731 is R1115odd & op0510=0x3F & op0004=0b00001; R2731 & op2126=0b100010 & op1620=0b00010 {
  R2731 = int2float(R1115odd);
}

# CVTF.SD reg2, reg3
:cvtf.sd R1115, R2731odd is R1115 & op0510=0x3F & op0004=0b00010; R2731odd & op2126=0b100010 & op1620=0b10010 {
  R2731odd = float2float(R1115);
}

# CVTF.SL reg2, reg3
:cvtf.sl R1115, R2731odd is R1115 & op0510=0x3F & op0004=0b00100; R2731odd & op2126=0b100010 & op1620=0b00100 {
  R2731odd = trunc(R1115);
}

# CVTF.SUL reg2, reg3
:cvtf.sul R1115, R2731odd is R1115 & op0510=0x3F & op0004=0b10100; R2731odd & op2126=0b100010 & op1620=0b00100 {
  R2731odd = trunc(R1115);
}

# CVTF.SUW reg2, reg3
:cvtf.suw R1115, R2731 is R1115 & op0510=0x3F & op0004=0b10100; R2731 & op2126=0b100010 & op1620=0b00000 {
  R2731 = trunc(R1115);
}

# CVTF.SW reg2, reg3
:cvtf.sw R1115, R2731 is R1115 & op0510=0x3F & op0004=0b00100; R2731 & op2126=0b100010 & op1620=0b00000 {
  R2731 = trunc(R1115);
}

# CVTF.ULD reg2, reg3
:cvtf.uls R1115odd, R2731odd is R1115odd & op0510=0x3F & op0004=0b10001; R2731odd & op2126=0b100010 & op1620=0b10010 {
  R2731odd = int2float(R1115odd);
}

# CVTF.ULS reg2, reg3
:cvtf.uls R1115odd, R2731 is R1115odd & op0510=0x3F & op0004=0b10001; R2731 & op2126=0b100010 & op1620=0b00010 {
  R2731 = int2float(R1115odd);
}

# CVTF.UWD reg2, reg3
:cvtf.uwd R1115, R2731odd is R1115 & op0510=0x3F & op0004=0b10000; R2731odd & op2126=0b100010 & op1620=0b10010 {
  R2731odd = int2float(R1115);
}

# CVTF.UWS reg2, reg3
:cvtf.uws R1115, R2731 is R1115 & op0510=0x3F & op0004=0b10000; R2731 & op2126=0b100010 & op1620=0b00010 {
  R2731 = int2float(R1115);
}

# CVTF.WD reg2, reg3
:cvtf.wd R1115, R2731odd is R1115 & op0510=0x3F & op0004=0b00000; R2731odd & op2126=0b100010 & op1620=0b10010 {
  R2731odd = int2float(R1115);
}

# CVTF.WS reg2, reg3
:cvtf.ws R1115, R2731 is R1115 & op0510=0x3F & op0004=0b00000; R2731 & op2126=0b100010 & op1620=0b00010 {
  R2731 = int2float(R1115);
}

# DIVF.D reg1, reg2, reg3
:divf.s R0004odd, R1115odd, R2731odd is R0004odd & op0510=0x3F & R1115odd; R2731odd & op2126=0b100011 & op1620=0b11110 {
  R2731odd = R1115odd f/ R0004odd;
}

# DIVF.S reg1, reg2, reg3
:divf.s R0004, R1115, R2731 is R0004 & op0510=0x3F & R1115; R2731 & op2126=0b100011 & op1620=0b01110 {
  R2731 = R1115 f/ R0004;
}

# FLOORF.DL reg2, reg3
:floorf.dl R1115odd, R2731odd is R1115odd & op0510=0x3F & op0004=0b00011; R2731odd & op2126=0b100010 & op1620=0b10100 {
  local tmp:8 = floor(float2float(R1115odd));
  R2731odd = trunc(tmp);
}

# FLOORF.DUL reg2, reg3
:floorf.dul R1115odd, R2731odd is R1115odd & op0510=0x3F & op0004=0b10011; R2731odd & op2126=0b100010 & op1620=0b10100 {
  local tmp:8 = floor(float2float(R1115odd));
  R2731odd = trunc(tmp);
}

# FLOORF.DUW reg2, reg3
:floorf.duw R1115odd, R2731 is R1115odd & op0510=0x3F & op0004=0b10011; R2731 & op2126=0b100010 & op1620=0b10000 {
  R2731 = trunc(floor(R1115odd));
}

# FLOORF.DW reg2, reg3
:floorf.dw R1115odd, R2731 is R1115odd & op0510=0x3F & op0004=0b00011; R2731 & op2126=0b100010 & op1620=0b10000 {
  R2731 = trunc(floor(R1115odd));
}

# FLOORF.SL reg2, reg3
:floorf.sl R1115, R2731odd is R1115 & op0510=0x3F & op0004=0b00011; R2731odd & op2126=0b100010 & op1620=0b00100 {
  local tmp:8 = floor(float2float(R1115));
  R2731odd = trunc(tmp);
}

# FLOORF.SUL reg2, reg3
:floorf.sul R1115, R2731odd is R1115 & op0510=0x3F & op0004=0b10011; R2731odd & op2126=0b100010 & op1620=0b00100 {
  local tmp:8 = floor(float2float(R1115));
  R2731odd = trunc(tmp);
}

# FLOORF.SUW reg2, reg3
:floorf.suw R1115, R2731 is R1115 & op0510=0x3F & op0004=0b10011; R2731 & op2126=0b100010 & op1620=0b00000 {
  R2731 = trunc(floor(R1115));
}

# FLOORF.SW reg2, reg3
:floorf.suw R1115, R2731 is R1115 & op0510=0x3F & op0004=0b00011; R2731 & op2126=0b100010 & op1620=0b00000 {
  R2731 = trunc(floor(R1115));
}

# MADDF.S reg1, reg2, reg3, reg4
:maddf.s R0004, R1115, R2731, reg4 is R0004 & op0510=0x3F & R1115; R2731 & op2426=0b101 & op2122=0b00 & op1616=0 & reg4 {
  reg4 = (R1115 f* R0004) f+ R2731;
}

# MAXF.D reg1, reg2, reg3
:maxf.d R0004odd, R1115odd, R2731odd is R0004odd & op0510=0x3F & R1115odd; R2731odd & op2126=0b100011 & op1620=0b11000 {
  tmp_cond:1 = R1115odd f> R0004odd;
  # R2731odd = (R1115odd * zext(tmp_cond == 1)) | (R0004odd * zext(tmp_cond == 0) );
  condition(R2731odd, tmp_cond, R1115odd, R0004odd);
}

# MAXF.S reg1, reg2, reg3
:maxf.s R0004, R1115, R2731 is R0004 & op0510=0x3F & R1115; R2731 & op2126=0b100011 & op1620=0b01000 {
  tmp_cond:1 = R1115 f> R0004;
  # R2731 = (R1115 * zext(tmp_cond == 1)) | (R0004 * zext(tmp_cond == 0) );
  condition(R2731, tmp_cond, R1115, R0004);
}

# MINF.D reg1, reg2, reg3
:minf.d R0004odd, R1115odd, R2731odd is R0004odd & op0510=0x3F & R1115odd; R2731odd & op2126=0b100011 & op1620=0b11010 {
  tmp_cond:1 = R1115odd f< R0004odd;
  # R2731odd = (R1115odd * zext(tmp_cond == 1)) | (R0004odd * zext(tmp_cond == 0) );
  condition(R2731odd, tmp_cond, R1115odd, R0004odd);
}

# MINF.S reg1, reg2, reg3
:minf.s R0004, R1115, R2731 is R0004 & op0510=0x3F & R1115; R2731 & op2126=0b100011 & op1620=0b01010 {
  tmp_cond:1 = R1115 f< R0004;
  # R2731 = (R1115 * zext(tmp_cond == 1)) | (R0004 * zext(tmp_cond == 0) );
  condition(R2731, tmp_cond, R1115, R0004);
}

# MSUBF.S reg1, reg2, reg3, reg4
:msubf.s R0004, R1115, R2731, reg4 is R0004 & op0510=0x3F & R1115; R2731 & op2426=0b101 & op2122=0b01 & op1616=0 & reg4 {
  reg4 = (R1115 f* R0004) f- R2731;
}

# MULF.D reg1, reg2, reg3
:mulf.d R0004odd, R1115odd, R2731odd is R0004odd & op0510=0x3F & R1115odd; R2731odd & op2126=0b100011 & op1620=0b10100 {
  R2731odd = R1115odd f* R0004odd;
}

# MULF.S reg1, reg2, reg3
:mulf.s R0004, R1115, R2731 is R0004 & op0510=0x3F & R1115; R2731 & op2126=0b100011 & op1620=0b00100 {
  R2731 = R1115 f* R0004;
}

# NEGF.D reg2, reg3
:negf.d R1115odd, R2731odd is R1115odd & op0510=0x3F & op0004=0b00001; R2731odd & op2126=0b100010 & op1620=0b11000 {
  R2731odd = f- R1115odd;
}

# NEGF.S reg2, reg3
:negf.s R1115, R2731 is R1115 & op0510=0x3F & op0004=0b00001; R2731 & op2126=0b100010 & op1620=0b01000 {
  R2731 = f- R1115;
}

# NMADDF.S reg1, reg2, reg3, reg4
:nmaddf.s R0004, R1115, R2731, reg4 is R0004 & op0510=0x3F & R1115; R2731 & op2426=0b101 & op2122=0b10 & op1616=0 & reg4 {
  reg4 = f-((R1115 f* R0004) f+ R2731);
}

# NMSUBF.S reg1, reg2, reg3, reg4
:nmsubf.s R0004, R1115, R2731, reg4 is R0004 & op0510=0x3F & R1115; R2731 & op2426=0b101 & op2122=0b11 & op1616=0 & reg4 {
  reg4 = f-((R1115 f* R0004) f- R2731);
}

# RECIPF.D reg2, reg3
:recipf.d R1115odd, R2731odd is R1115odd & op0510=0x3F & op0004=0b00001; R2731odd & op2126=0b100010 & op1620=0b11110 {
  R2731odd = 1 f/ R1115odd;
}

# RECIPF.S reg2, reg3
:recipf.s R1115, R2731 is R1115 & op0510=0x3F & op0004=0b00001; R2731 & op2126=0b100010 & op1620=0b01110 {
  R2731 = 1 f/ R1115;
}

# RSQRTF.D reg2, reg3
:rsqrtf.d R1115odd, R2731odd is R1115odd & op0510=0x3F & op0004=0b00010; R2731odd & op2126=0b100010 & op1620=0b11110 {
  R2731odd = 1 f/ sqrt(R1115odd);
}

# RSQRTF.S reg2, reg3
:rsqrtf.s R1115, R2731 is R1115 & op0510=0x3F & op0004=0b00010; R2731 & op2126=0b100010 & op1620=0b01110 {
  R2731 = 1 f/ sqrt(R1115);
}

# SQRTF.D reg2, reg3
:sqrtf.d R1115odd, R2731odd is R1115odd & op0510=0x3F & op0004=0b00000; R2731odd & op2126=0b100010 & op1620=0b11110 {
  R2731odd = sqrt(R1115odd);
}

# SQRTF.S reg2, reg3
:sqrtf.s R1115, R2731 is R1115 & op0510=0x3F & op0004=0b00000; R2731 & op2126=0b100010 & op1620=0b01110 {
  R2731 = sqrt(R1115);
}


# SUBF.D reg1, reg2, reg3
:subf.d R0004odd, R1115odd, R2731odd is R0004odd & op0510=0x3F & R1115odd; R2731odd & op2126=0b100011 & op1620=0b10010 {
  R2731odd = R1115odd f- R0004odd;
}

# SUBF.S reg1, reg2, reg3
:subf.s R0004, R1115, R2731 is R0004 & op0510=0x3F & R1115; R2731 & op2126=0b100011 & op1620=0b00010 {
  R2731 = R1115 f- R0004;
}

# TRFSR fcbit
:trfsr fcbit1719 is op1115=0 & op0510=0x3F & op0004=0; op2731=0 & op2126=0b100000 & op2020=0 & fcbit1719 & op1616=0 {
  local tmp:4 = FPSR & (1 << (fcbit1719 + 24));
  $(PSW_Z) = (tmp != 0);
}

# TRNCF.DL reg2, reg3
:trncf.dl R1115odd, R2731odd is R1115odd & op0510=0x3F & op0004=0b00001; R2731odd & op2126=0b100010 & op1620=0b10100 {
  R2731odd = trunc(R1115odd);
}

# TRNCF.DUL reg2, reg3
:trncf.dul R1115odd, R2731odd is R1115odd & op0510=0x3F & op0004=0b10001; R2731odd & op2126=0b100010 & op1620=0b10100 {
  R2731odd = trunc(R1115odd);
}

# TRNCF.DUW reg2, reg3
:trncf.duw R1115odd, R2731 is R1115odd & op0510=0x3F & op0004=0b10001; R2731 & op2126=0b100010 & op1620=0b10000 {
  R2731 = trunc(R1115odd);
}

# TRNCF.DW reg2, reg3
:trncf.dw R1115odd, R2731 is R1115odd & op0510=0x3F & op0004=0b00001; R2731 & op2126=0b100010 & op1620=0b10000 {
  R2731 = trunc(R1115odd);
}

# TRNCF.SL reg2, reg3
:trncf.sl R1115, R2731odd is R1115 & op0510=0x3F & op0004=0b00001; R2731odd & op2126=0b100010 & op1620=0b00100 {
  R2731odd = trunc(R1115);
}

# TRNCF.SUL reg2, reg3
:trncf.sul R1115, R2731odd is R1115 & op0510=0x3F & op0004=0b10001; R2731odd & op2126=0b100010 & op1620=0b00100 {
  R2731odd = trunc(R1115);
}

# TRNCF.SUW reg2, reg3
:trncf.suw R1115, R2731 is R1115 & op0510=0x3F & op0004=0b10001; R2731 & op2126=0b100010 & op1620=0b00000 {
  R2731 = trunc(R1115);
}

# TRNCF.SW reg2, reg3
:trncf.sw R1115, R2731 is R1115 & op0510=0x3F & op0004=0b00001; R2731 & op2126=0b100010 & op1620=0b00000 {
  R2731 = trunc(R1115);
}

